# GitHub Actions workflow to deploy Deita application using Ansible
# Runs after Docker images are built and pushed successfully

name: Deploy to Production

on:
  workflow_run:
    workflows: ["Build Backend Docker Image",]
    types: [completed]
    branches: [main]
    
concurrency:
  group: deploy-production-${{ github.ref }}
  cancel-in-progress: true

env:
  ANSIBLE_HOST_KEY_CHECKING: false

jobs:
  check-prerequisites:
    name: Check Prerequisites
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Check if both workflows succeeded
        id: check
        run: |
          # This job will only run if triggered by workflow_run
          # We need to verify both backend and frontend builds succeeded
          echo "should-deploy=true" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.should-deploy == 'true'
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
      
      - name: Create SSH directory
        run: mkdir -p ~/.ssh
      
      - name: Set up SSH key
        run: |
          # Write SSH key with proper formatting and newlines
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          
          # Ensure proper permissions before any SSH operations
          chmod 600 ~/.ssh/deploy_key
          chmod 700 ~/.ssh
          
          # Add known hosts with proper error handling (use custom port if set)
          SSH_PORT="${{ secrets.PRODUCTION_SERVER_PORT || '22' }}"
          ssh-keyscan -p $SSH_PORT -H ${{ secrets.PRODUCTION_SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || echo "Warning: Could not add host key"
      
      - name: Create production environment file
        run: |
          cat > .env << EOF
          DEBUG=${{ vars.DEBUG }}
          ENVIRONMENT=production
          FRONTEND_URL=${{ vars.FRONTEND_URL }}
          ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}
          S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          FROM_EMAIL=${{ secrets.FROM_EMAIL }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          APP_VERSION=${{ github.sha }}
          AI_MODEL_NAME=${{ secrets.AI_MODEL_NAME }}
          AI_MODEL_ENDPOINT=${{ secrets.AI_MODEL_ENDPOINT }}
          AI_MODEL_API_KEY=${{ secrets.AI_MODEL_API_KEY }}
          EOF
      
      - name: Test Ansible connection
        run: |
          cd ansible
          ansible production -m ping -e "production_server_host=${{ secrets.PRODUCTION_SERVER_HOST }}" -e "production_server_user=${{ secrets.PRODUCTION_SERVER_USER }}" -e "production_server_port=${{ secrets.PRODUCTION_SERVER_PORT || '22' }}"
      
      - name: Run Ansible deployment playbook
        run: |
          cd ansible
          ansible-playbook -i inventory.yml deploy.yml -e "production_server_host=${{ secrets.PRODUCTION_SERVER_HOST }}" -e "production_server_user=${{ secrets.PRODUCTION_SERVER_USER }}" -e "production_server_port=${{ secrets.PRODUCTION_SERVER_PORT || '22' }}" -e "app_directory=${{ secrets.PRODUCTION_APP_DIRECTORY }}" -e "postgres_password=${{ secrets.POSTGRES_PASSWORD }}" -e "s3_endpoint=${{ secrets.S3_ENDPOINT }}" -e "s3_access_key=${{ secrets.S3_ACCESS_KEY }}" -e "s3_secret_key=${{ secrets.S3_SECRET_KEY }}" -e "s3_bucket_name=${{ secrets.S3_BUCKET_NAME }}" -e "smtp_host=${{ secrets.SMTP_HOST }}" -e "smtp_port=${{ secrets.SMTP_PORT }}" -e "smtp_user=${{ secrets.SMTP_USER }}" -e "smtp_password=${{ secrets.SMTP_PASSWORD }}" -e "from_email=${{ secrets.FROM_EMAIL }}" -e "secret_key=${{ secrets.SECRET_KEY }}" -e "ai_model_name=${{ secrets.AI_MODEL_NAME }}" -e "ai_model_endpoint=${{ secrets.AI_MODEL_ENDPOINT }}" -e "ai_model_api_key=${{ secrets.AI_MODEL_API_KEY }}" -e "github_token=${{ secrets.GITHUB_TOKEN }}" -e "github_actor=${{ github.actor }}" -v