[project]
name = "deita-backend"
version = "0.1.0"
description = "Deita backend API - Data exploration and AI-powered SQL assistance"
authors = [
    {name = "Alberto Casero", email = "kas.appeal@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi[standard]>=0.116.1",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "duckdb>=0.9.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "email-validator>=2.1.0",
    "pandas>=2.1.0",
    "black>=25.1.0",
    "isort>=6.0.1",
    "python-magic>=0.4.27",
    "sqlglot[rs]>=19.9.0",
    "boto3>=1.40.30",
    "litellm>=1.77.5",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "ruff>=0.13.3",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["app/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "-v",
    "--tb=short",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "app/tests/*",
    "app/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Alembic configuration
[tool.alembic]
script_location = "migrations"
prepend_sys_path = ["."]
version_path_separator = "os"

[tool.alembic.post_write_hooks]
hooks = "black,isort"
black.type = "console_scripts"
black.entrypoint = "black"
black.options = "--line-length=88"
isort.type = "console_scripts"
isort.entrypoint = "isort"
isort.options = "--profile=black"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
lint.ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    "migrations",
    "__pycache__",
    ".git",
    ".venv",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
skip-string-normalization = false

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["app"]
skip_gitignore = true

