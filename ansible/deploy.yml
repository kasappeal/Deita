---
- name: Deploy Deita Application
  hosts: production
  become: yes
  gather_facts: yes
  
  vars:
    docker_compose_version: "2.23.0"
    
  tasks:
    - name: Ensure required packages are installed
      package:
        name:
          - curl
          - git
        state: present
    
    - name: Check if Docker is installed
      command: docker --version
      register: docker_check
      ignore_errors: yes
      changed_when: false
    
    - name: Install Docker if not present
      block:
        - name: Add Docker GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
          when: ansible_os_family == "Debian"
        
        - name: Add Docker repository
          apt_repository:
            repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
          when: ansible_os_family == "Debian"
        
        - name: Install Docker
          package:
            name: docker-ce
            state: present
          when: ansible_os_family == "Debian"
        
        - name: Install Docker (RedHat family)
          dnf:
            name: docker
            state: present
          when: ansible_os_family == "RedHat"
      when: docker_check.rc != 0
    
    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
    
    - name: Add deploy user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
    
    - name: Check if Docker Compose is installed
      command: docker compose version
      register: compose_check
      ignore_errors: yes
      changed_when: false
    
    - name: Install Docker Compose if not present
      block:
        - name: Download Docker Compose
          get_url:
            url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-x86_64"
            dest: /usr/local/bin/docker-compose
            mode: '0755'
        
        - name: Create docker compose symlink
          file:
            src: /usr/local/bin/docker-compose
            dest: /usr/local/bin/docker
            state: link
      when: compose_check.rc != 0
    
    - name: Ensure application directory exists
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
    
    - name: Copy docker-compose.yml
      copy:
        src: ../docker-compose.yml
        dest: "{{ app_directory }}/docker-compose.yml"
    
    - name: Copy environment file
      copy:
        src: ../.env
        dest: "{{ app_directory }}/.env"
    
    - name: Login to GitHub Container Registry
      shell: docker login ghcr.io -u "{{ github_actor }}" -p "{{ github_token }}"
      args:
        chdir: "{{ app_directory }}"
    
    - name: Pull latest Docker images
      shell: docker compose pull
      args:
        chdir: "{{ app_directory }}"
      register: pull_result
      changed_when: "'Pulling' in pull_result.stdout"
    
    - name: Start/restart application containers
      shell: docker compose up -d
      args:
        chdir: "{{ app_directory }}"
      register: up_result
    
    - name: Wait for backend container to be healthy
      shell: docker compose ps --filter "name=backend" --format json
      args:
        chdir: "{{ app_directory }}"
      register: backend_status
      until: "'healthy' in backend_status.stdout or 'running' in backend_status.stdout"
      retries: 30
      delay: 10
    
    - name: Run database migrations
      shell: docker compose exec -T backend alembic upgrade head
      args:
        chdir: "{{ app_directory }}"
      register: migration_result
    
    - name: Display deployment results
      debug:
        msg: |
          Deployment completed successfully!
          Pull result: {{ pull_result.stdout }}
          Up result: {{ up_result.stdout }}
          Migration result: {{ migration_result.stdout }}
    
    - name: Verify application is running
      shell: docker compose ps
      args:
        chdir: "{{ app_directory }}"
      register: ps_result
    
    - name: Show running containers
      debug:
        msg: "{{ ps_result.stdout_lines }}"
